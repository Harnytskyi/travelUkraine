{"version":3,"sources":["utils.js","index.js"],"names":["regionsCoordinates","Krym","lon_min","lon_max","lat_min","lat_max","Volyn","Kyiv","Khmelnytskyi","Zhytomyr","Ternopil","Rivne","Lviv","Kirovograd","Dnipropetrovsk","Kharkiv","Poltava","Cherkasy","Sumy","Chernihiv","Zaporizhzhia","Kherson","Donetsk","Luhansk","Zakarpattia","Chernivtsi","Mykolaiv","Odesa","Vinnytsia","regions","Object","keys","getOpenTripMapUrl","regionName","getOpenTripMarPlaceUrl","placexid","kinds","renderApp","document","getElementById","innerHTML","App","searchInput","focus","selectionStart","value","length","window","addEventListener","findSVGElements","svg","contentDocument","svgPolyline","querySelectorAll","i","id","setAttribute","e","selectRegion","dataStore","regionPlaces","ShowRegions","showSearchInput","showAvailableKinds","showPlaces","showPlaceInfo","listOfRegion","item","push","region","error","isDataLoading","loadRegionPlaces","then","data","place","xid","name","rate","split","selectAvailableKinds","selectedPlaces","catch","finally","url","fetch","response","json","searchRequest","listOfPlace","join","placeToShow","preview","source","wikipedia_extracts","text","point","lat","lon","wikipedia","loadPlaceInfo","availableKinds","kindsOfObject","concat","filter","some","kind","every","selectPlaces","filterByKinds","findPlaces","toUpperCase","searchedPlaces","includes","selectPlaceToShow","kindsCheckboxes","map","checkstatus","selectedKinds","changeStatus","placesCash"],"mappings":";AAsKC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,EAAA,QAAA,uBAAA,EAAA,QAAA,QAAA,QAAA,wBAAA,EAtKM,MAAMA,EAAqB,CAChCC,KAAM,CACJC,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,YAEXC,MAAO,CACLJ,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,YAEXE,KAAM,CACJL,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,YAEXG,aAAc,CACZN,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,YAEXI,SAAU,CACRP,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,YAEXK,SAAU,CACRR,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,YAEXM,MAAO,CACLT,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,YAEXO,KAAM,CACJV,QAAS,SACTC,QAAS,WACTC,QAAS,WACTC,QAAS,WAEXQ,WAAY,CACVX,QAAS,UACTC,QAAS,WACTC,QAAS,UACTC,QAAS,YAEXS,eAAgB,CACdZ,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,YAEXU,QAAS,CACPb,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,WAEXW,QAAS,CACPd,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,YAEXY,SAAU,CACRf,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,YAEXa,KAAM,CACJhB,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,YAEXc,UAAW,CACTjB,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,YAEXe,aAAc,CACZlB,QAAS,WACTC,QAAS,UACTC,QAAS,WACTC,QAAS,YAEXgB,QAAS,CACPnB,QAAS,UACTC,QAAS,WACTC,QAAS,WACTC,QAAS,WAEXiB,QAAS,CACPpB,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,YAEXkB,QAAS,CACPrB,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,YAEXmB,YAAa,CACXtB,QAAS,WACTC,QAAS,WACTC,QAAS,UACTC,QAAS,YAEXoB,WAAY,CACVvB,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,YAEQ,kBAAA,CACjBH,QAAS,WACTC,QAAS,WACTC,QAAS,SACTC,QAAS,YAEXqB,SAAU,CACRxB,QAAS,WACTC,QAAS,WACTC,QAAS,UACTC,QAAS,YAEXsB,MAAO,CACLzB,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,YAEXuB,UAAW,CACT1B,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,YAEE,YAAA,CACXH,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,QAAS,aAWZ,QAAA,mBAAA,EARM,MAAMwB,EAAUC,OAAOC,KAAK/B,GAE5B,SAASgC,EAAkBC,GAC1B,MAAA,QAAE/B,EAAF,QAAWC,EAAX,QAAoBC,EAApB,QAA6BC,GAAYL,EAAmBiC,GAC1D,gEAAyD/B,aAAmBC,aAAmBC,aAAmBC,2GAErH,SAAS6B,EAAuBC,GAC7B,uDAAgDA,oEACzD,QAAA,QAAA;;AC4CA,aAhND,IAAA,EAAA,QAAA,WAEA,MAAMC,EAAQ,CACZ,eACA,WACA,WACA,wBACA,UACA,QACA,YAwBF,SAASC,IACPC,SAASC,eAAe,YAAYC,mBAChCC,YAEEC,MAAAA,EAAcJ,SAASC,eAAe,UACxCG,GACFA,EAAYC,QACZD,EAAYE,eAAiBF,EAAYG,MAAMC,QAC1CC,OAAOC,iBAAiB,OAAQC,GAAiB,GAG1D,SAASA,IACHC,IAAAA,EAAMZ,SAASC,eAAe,gBAAgBY,gBAC9CC,EAAcF,EAAIG,iBAAiB,YAClC,IAAA,IAAIC,EAAI,EAAGA,EAAIF,EAAYN,OAAQQ,IACtCJ,EAAIX,eAAea,EAAYE,GAAGC,IAAIC,aAAa,WAAY3B,EAAQyB,QAAAA,MACvEJ,EAAIX,eAAea,EAAYE,GAAGC,IAAIP,iBAAiB,QAASS,IAC9DV,OAAOW,aAAa7B,EAAQyB,QAAAA,MAIlC,SAASb,IACHM,OAAwC,GAAxCA,OAAOY,UAAUC,aAAad,eAA4Be,oBAE7CC,wBACRC,uBACAC,uBACAC,YAIX,SAASJ,IACHK,IAAAA,EAAe,GACd,IAAA,IAAIC,KAAQtC,EAAjB,QACEqC,EAAaE,2BAA2BvC,EAAQsC,QAAAA,oDACtCtC,EAAQsC,QAAAA,8BAIZ,MAAA,2IAOV,SAAST,EAAaW,GACpBtB,OAAOY,UAAUW,MAAQ,KACzBvB,OAAOY,UAAUY,eAAgB,EACjCxB,OACGyB,iBAAiBH,GACjBI,KAAK,CAACC,EAAMJ,KAEPA,GADJvB,OAAOY,UAAUY,eAAgB,EAC7BD,EACFvB,OAAOY,UAAUW,MAAQA,OACpB,GAAII,EAAM,CACfA,EAAOA,EAAKA,KACP,IAAA,IAAIC,KAASD,EAChB3B,OAAOY,UAAUC,aAAaQ,KAAK,CACjCQ,IAAKF,EAAKC,GAAOC,IACjBC,KAAMH,EAAKC,GAAOE,KAClBC,KAAMJ,EAAKC,GAAOG,KAClB1C,MAAOsC,EAAKC,GAAOvC,MAAM2C,MAAM,OAGnCC,IACAjC,OAAOY,UAAUsB,eAAiB,IAAIlC,OAAOY,UAAUC,iBAG1DsB,MAAM,KACLnC,OAAOY,UAAUW,MAAQ,wBAE1Ba,QAAQpC,OAAOV,WAEpB,SAASmC,EAAiBH,GAClBe,MAAAA,GAAM,EAAkBf,EAAAA,mBAAAA,GACvBgB,OAAAA,MAAMD,GACVX,KAAKa,GAAYA,EAASC,QAC1Bd,KAAKC,IAAS,CAAEA,KAAAA,KAErB,SAASZ,IACC,mCAA4Bf,OAAOY,UAAU6B,mKAEvD,SAASxB,IACHyB,IAAAA,EAAc,GACb,IAAA,IAAItB,KAAQpB,OAAOY,UAAUsB,eAChCQ,EAAYrB,2BAA2BrB,OAAOY,UAAUsB,eAAed,GAAMS,yDACpE7B,OAAOY,UAAUsB,eAAed,GAAMU,gCAG1CY,OAAAA,EAAYC,KAAK,IAG1B,SAASzB,IACHlB,GAAgC,IAAhCA,OAAOY,UAAUgC,YAAmB,MAAQ,wBAC3C,CACGhB,MAAAA,EAAQ5B,OAAOY,UAAUgC,YACvB,mBAAYhB,EAAMiB,QAAQC,0BAA0BlB,EAAME,mBAAmBF,EAAMmB,mBAAmBC,6BAChGpB,EAAMqB,MAAMC,QAAQtB,EAAMqB,MAAME,qBAAqBvB,EAAMwB,wCAG7E,SAASC,EAAczB,GACfS,MAAAA,GAAM,EAAuBT,EAAAA,wBAAAA,GAC5BU,OAAAA,MAAMD,GACVX,KAAKa,GAAYA,EAASC,QAC1Bd,KAAKC,IAAS,CAAEA,KAAAA,KAGrB,SAASM,IACHqB,IAAAA,EAAiB,GAChB,IAAA,IAAIlC,KAAQpB,OAAOY,UAAUC,aAAc,CAC1C0C,IAAAA,EAAgBvD,OAAOY,UAAUC,aAAaO,GAAM/B,MACxDiE,EAAiBA,EAAeE,OAC9BD,EAAcE,OACZrC,GAAQ/B,EAAMqE,KAAKC,GAAQA,IAASvC,IAASkC,EAAeM,MAAMD,GAAQA,GAAQvC,KAInF,IAAA,IAAIuC,KAAQL,EACftD,OAAOY,UAAU0C,eAAeA,EAAeK,KAAS,EAI5D,SAASE,IACPC,IACAC,IACAzE,IAEF,SAASyE,IACHtB,IAAAA,EAAgBzC,OAAOY,UAAU6B,cAAcuB,cAC/CC,EAAiBjE,OAAOY,UAAUsB,eAAeuB,OAAOrC,GAC1DA,EAAKU,KAAKkC,cAAcE,SAASzB,IAEnCzC,OAAOY,UAAUsB,eAAiB+B,EAEpC,SAASE,EAAkBvC,GACzB5B,OAAOY,UAAUW,MAAQ,KACzBvB,OAAOY,UAAUY,eAAgB,EACjC6B,EAAczB,GACXF,KAAK,CAACC,EAAMJ,KACXvB,OAAOY,UAAUY,eAAgB,EAC7BD,EAAOvB,OAAOY,UAAUW,MAAQA,EAC3BI,IACP3B,OAAOY,UAAUgC,YAAcjB,EAAKA,QAGvCQ,MAAM,KACLnC,OAAOY,UAAUW,MAAQ,wBAE1Ba,QAAQpC,OAAOV,WAEpB,SAAS0B,IAOAoD,OANerF,OAAOC,KAAKgB,OAAOY,UAAU0C,gBAAgBe,IACjEjD,2CAC0CA,qCAAwCkD,EAC9ElD,MACGA,aAEcuB,KAAK,IAE9B,SAAS2B,EAAYxE,GACfE,GAA0C,GAA1CA,OAAOY,UAAU0C,eAAexD,GAAgB,MAAQ,UAE9D,SAASgE,IACHS,IAAAA,EAAgB,GACf,IAAA,IAAInD,KAAQpB,OAAOY,UAAU0C,eACa,GAAzCtD,OAAOY,UAAU0C,eAAelC,IAAemD,EAAclD,KAAKD,GAExEpB,OAAOY,UAAUsB,eAAiBlC,OAAOY,UAAUC,aAAa4C,OAAOrC,GACrEA,EAAK/B,MAAMqE,KAAK5D,GAASyE,EAAcb,KAAKC,GAAQ7D,IAAU6D,KAGlE,SAASa,EAAa1E,GACpBE,OAAOY,UAAU0C,eAAexD,IAAUE,OAAOY,UAAU0C,eAAexD,GAC1E+D,IAnMF7D,OAAOY,UAAY,CACjBC,aAAc,GACdqB,eAAgB,GAChBU,YAAa,GACbH,cAAe,GACfa,eAAgB,GAChB9B,eAAe,EACfD,MAAO,KACPkD,WAAY,IAGdzE,OAAOlB,QAAUA,EAAjB,QACAkB,OAAOW,aAAeA,EACtBX,OAAOmE,kBAAoBA,EAC3BnE,OAAO6D,aAAeA,EACtB7D,OAAOV,UAAYA,EACnBU,OAAOwE,aAAeA,EACtBxE,OAAOyB,iBAAmBA,EAE1BnC","file":"travelUkraine.429b5bd5.js","sourceRoot":"..","sourcesContent":["export const regionsCoordinates = {\n  Krym: {\n    lon_min: 32.4642563,\n    lon_max: 36.5732288,\n    lat_min: 44.3907396,\n    lat_max: 45.9511497,\n  },\n  Volyn: {\n    lon_min: 24.1287231,\n    lon_max: 25.5373764,\n    lat_min: 50.6911293,\n    lat_max: 51.6681902,\n  },\n  Kyiv: {\n    lon_min: 29.7125244,\n    lon_max: 30.3724766,\n    lat_min: 49.3283665,\n    lat_max: 51.4423992,\n  },\n  Khmelnytskyi: {\n    lon_min: 26.3889885,\n    lon_max: 27.3504639,\n    lat_min: 48.6145267,\n    lat_max: 50.2584005,\n  },\n  Zhytomyr: {\n    lon_min: 27.6812553,\n    lon_max: 29.2579651,\n    lat_min: 49.8918697,\n    lat_max: 51.4189074,\n  },\n  Ternopil: {\n    lon_min: 25.2999687,\n    lon_max: 26.1488342,\n    lat_min: 48.8745383,\n    lat_max: 49.8451229,\n  },\n  Rivne: {\n    lon_min: 26.0971642,\n    lon_max: 26.8395996,\n    lat_min: 50.5224859,\n    lat_max: 51.7598717,\n  },\n  Lviv: {\n    lon_min: 23.47229,\n    lon_max: 24.7221565,\n    lat_min: 49.5465978,\n    lat_max: 50.242704,\n  },\n  Kirovograd: {\n    lon_min: 30.591259,\n    lon_max: 33.4671021,\n    lat_min: 48.224787,\n    lat_max: 48.7110135,\n  },\n  Dnipropetrovsk: {\n    lon_min: 33.8109398,\n    lon_max: 36.0679436,\n    lat_min: 48.1351628,\n    lat_max: 48.7620733,\n  },\n  Kharkiv: {\n    lon_min: 35.4703903,\n    lon_max: 37.6388168,\n    lat_min: 49.2184941,\n    lat_max: 50.219094,\n  },\n  Poltava: {\n    lon_min: 32.8285217,\n    lon_max: 34.8431396,\n    lat_min: 49.2067196,\n    lat_max: 50.0993309,\n  },\n  Cherkasy: {\n    lon_min: 31.2179947,\n    lon_max: 32.4386787,\n    lat_min: 49.0775767,\n    lat_max: 49.8202651,\n  },\n  Sumy: {\n    lon_min: 33.2145882,\n    lon_max: 35.1259518,\n    lat_min: 50.5399447,\n    lat_max: 51.1806343,\n  },\n  Chernihiv: {\n    lon_min: 30.9596443,\n    lon_max: 32.9368401,\n    lat_min: 50.7713164,\n    lat_max: 52.0050683,\n  },\n  Zaporizhzhia: {\n    lon_min: 34.9693108,\n    lon_max: 36.032238,\n    lat_min: 46.4869288,\n    lat_max: 48.0394139,\n  },\n  Kherson: {\n    lon_min: 32.409668,\n    lon_max: 34.6206665,\n    lat_min: 46.2367932,\n    lat_max: 46.813219,\n  },\n  Donetsk: {\n    lon_min: 37.1887207,\n    lon_max: 38.2104492,\n    lat_min: 46.9108747,\n    lat_max: 48.8710382,\n  },\n  Luhansk: {\n    lon_min: 38.4847641,\n    lon_max: 39.6823597,\n    lat_min: 48.3014667,\n    lat_max: 49.6119335,\n  },\n  Zakarpattia: {\n    lon_min: 22.2761536,\n    lon_max: 23.6830902,\n    lat_min: 48.359671,\n    lat_max: 48.6519642,\n  },\n  Chernivtsi: {\n    lon_min: 25.6214476,\n    lon_max: 26.1721802,\n    lat_min: 47.9899504,\n    lat_max: 48.5238812,\n  },\n  'Ivano-Frankivsk': {\n    lon_min: 24.1834831,\n    lon_max: 25.1164627,\n    lat_min: 48.40197,\n    lat_max: 48.9546355,\n  },\n  Mykolaiv: {\n    lon_min: 31.3247681,\n    lon_max: 32.9201889,\n    lat_min: 46.863947,\n    lat_max: 47.7465958,\n  },\n  Odesa: {\n    lon_min: 30.1241684,\n    lon_max: 30.7727051,\n    lat_min: 45.8364541,\n    lat_max: 47.5973662,\n  },\n  Vinnytsia: {\n    lon_min: 27.9656982,\n    lon_max: 29.4986343,\n    lat_min: 48.3264685,\n    lat_max: 49.5904614,\n  },\n  'Kyiv city': {\n    lon_min: 30.4126453,\n    lon_max: 30.6572628,\n    lat_min: 50.3429955,\n    lat_max: 50.5214763,\n  },\n};\nexport const regions = Object.keys(regionsCoordinates);\n\nexport function getOpenTripMapUrl(regionName) {\n  const { lon_min, lon_max, lat_min, lat_max } = regionsCoordinates[regionName];\n  return `https://api.opentripmap.com/0.1/en/places/bbox?lon_min=${lon_min}&lon_max=${lon_max}&lat_min=${lat_min}&lat_max=${lat_max}&src_attr=wikidata&format=json&limit=30&apikey=${process.env.OPEN_TRIP_MAP_API_KEY}`;\n}\nexport function getOpenTripMarPlaceUrl(placexid) {\n  return `https://api.opentripmap.com/0.1/en/places/xid/${placexid}?apikey=${process.env.OPEN_TRIP_MAP_API_KEY}`;\n}\n","// Start from here\n\nimport { regions, getOpenTripMapUrl, getOpenTripMarPlaceUrl } from './utils';\n\nconst kinds = [\n  'architecture',\n  'cultural',\n  'historic',\n  'industrial_facilities',\n  'natural',\n  'other',\n  'religion',\n];\n\nwindow.dataStore = {\n  regionPlaces: [],\n  selectedPlaces: [],\n  placeToShow: '',\n  searchRequest: '',\n  availableKinds: [],\n  isDataLoading: false,\n  error: null,\n  placesCash: {},\n};\n\nwindow.regions = regions;\nwindow.selectRegion = selectRegion;\nwindow.selectPlaceToShow = selectPlaceToShow;\nwindow.selectPlaces = selectPlaces;\nwindow.renderApp = renderApp;\nwindow.changeStatus = changeStatus;\nwindow.loadRegionPlaces = loadRegionPlaces;\n\nrenderApp();\n\nfunction renderApp() {\n  document.getElementById('app-root').innerHTML = `\n    ${App()}\n    `;\n  const searchInput = document.getElementById('search');\n  if (searchInput) {\n    searchInput.focus();\n    searchInput.selectionStart = searchInput.value.length;\n  } else window.addEventListener('load', findSVGElements, false);\n}\n\nfunction findSVGElements() {\n  var svg = document.getElementById('mapOfUkraine').contentDocument;\n  var svgPolyline = svg.querySelectorAll('polyline');\n  for (let i = 0; i < svgPolyline.length; i++) {\n    svg.getElementById(svgPolyline[i].id).setAttribute('value', `${regions[i]}`);\n    svg.getElementById(svgPolyline[i].id).addEventListener('click', e => {\n      window.selectRegion(regions[i]);\n    });\n  }\n}\nfunction App() {\n  if (window.dataStore.regionPlaces.length == 0) return `<div>${ShowRegions()}</div>`;\n  else {\n    return `<div>${showSearchInput()}</div> \n    <div>${showAvailableKinds()}</div>\n    <div>${showPlaces()}</div>\n    <div>${showPlaceInfo()}</div>`;\n  }\n}\n\nfunction ShowRegions() {\n  let listOfRegion = [];\n  for (let item in regions) {\n    listOfRegion.push(`<li><button value=\"${regions[item]}\" onclick=\"selectRegion(value)\" >\n            ${regions[item]}\n        </button></li>`);\n  }\n  //return listOfRegion.join('');\n  return `<object\n    id=\"mapOfUkraine\"\n    type=\"image/svg+xml\"\n    data=\"https://nelina.studio/img/works/graphdesign/ua/ua.svg\">\n  </object>`;\n}\n\nfunction selectRegion(region) {\n  window.dataStore.error = null;\n  window.dataStore.isDataLoading = true;\n  window\n    .loadRegionPlaces(region)\n    .then((data, error) => {\n      window.dataStore.isDataLoading = false;\n      if (error) {\n        window.dataStore.error = error;\n      } else if (data) {\n        data = data.data;\n        for (let place in data) {\n          window.dataStore.regionPlaces.push({\n            xid: data[place].xid,\n            name: data[place].name,\n            rate: data[place].rate,\n            kinds: data[place].kinds.split(','),\n          });\n        }\n        selectAvailableKinds();\n        window.dataStore.selectedPlaces = [...window.dataStore.regionPlaces];\n      }\n    })\n    .catch(() => {\n      window.dataStore.error = 'some error occurred';\n    })\n    .finally(window.renderApp);\n}\nfunction loadRegionPlaces(region) {\n  const url = getOpenTripMapUrl(region);\n  return fetch(url)\n    .then(response => response.json())\n    .then(data => ({ data }));\n}\nfunction showSearchInput() {\n  return `<input id=\"search\" value=\"${window.dataStore.searchRequest}\" onsearch=\"window.dataStore.searchRequest = value; selectPlaces()\" onkeyup=\"window.dataStore.searchRequest = value; selectPlaces()\" type=\"search\">`;\n}\nfunction showPlaces() {\n  let listOfPlace = [];\n  for (let item in window.dataStore.selectedPlaces) {\n    listOfPlace.push(`<li><button value=\"${window.dataStore.selectedPlaces[item].xid}\" onclick=\"selectPlaceToShow(value)\" >\n           ${window.dataStore.selectedPlaces[item].name}\n        </button></li>`);\n  }\n  return listOfPlace.join('');\n}\n\nfunction showPlaceInfo() {\n  if (window.dataStore.placeToShow == '') return `choose place you like`;\n  else {\n    const place = window.dataStore.placeToShow;\n    return `<img src=\"${place.preview.source}\" alt=\"\"><strong>${place.name}</strong><p>${place.wikipedia_extracts.text}</p>\n      <div>GPS: ${place.point.lat}, ${place.point.lon}</div><a href=\"${place.wikipedia}\">See more at Wikipedia</a>`;\n  }\n}\nfunction loadPlaceInfo(place) {\n  const url = getOpenTripMarPlaceUrl(place);\n  return fetch(url)\n    .then(response => response.json())\n    .then(data => ({ data }));\n}\n\nfunction selectAvailableKinds() {\n  let availableKinds = [];\n  for (let item in window.dataStore.regionPlaces) {\n    let kindsOfObject = window.dataStore.regionPlaces[item].kinds;\n    availableKinds = availableKinds.concat(\n      kindsOfObject.filter(\n        item => kinds.some(kind => kind === item) && availableKinds.every(kind => kind != item),\n      ),\n    );\n  }\n  for (let kind in availableKinds) {\n    window.dataStore.availableKinds[availableKinds[kind]] = true;\n  }\n}\n\nfunction selectPlaces() {\n  filterByKinds();\n  findPlaces();\n  renderApp();\n}\nfunction findPlaces() {\n  let searchRequest = window.dataStore.searchRequest.toUpperCase();\n  let searchedPlaces = window.dataStore.selectedPlaces.filter(item =>\n    item.name.toUpperCase().includes(searchRequest),\n  );\n  window.dataStore.selectedPlaces = searchedPlaces;\n}\nfunction selectPlaceToShow(place) {\n  window.dataStore.error = null;\n  window.dataStore.isDataLoading = true;\n  loadPlaceInfo(place)\n    .then((data, error) => {\n      window.dataStore.isDataLoading = false;\n      if (error) window.dataStore.error = error;\n      else if (data) {\n        window.dataStore.placeToShow = data.data;\n      }\n    })\n    .catch(() => {\n      window.dataStore.error = 'some error occurred';\n    })\n    .finally(window.renderApp);\n}\nfunction showAvailableKinds() {\n  let kindsCheckboxes = Object.keys(window.dataStore.availableKinds).map(\n    item =>\n      `<label><input type=\"checkbox\" value=\"${item}\" onchange=\"changeStatus(value)\" ${checkstatus(\n        item,\n      )}>${item}</label>`,\n  );\n  return kindsCheckboxes.join('');\n}\nfunction checkstatus(value) {\n  if (window.dataStore.availableKinds[value] == true) return `checked`;\n}\nfunction filterByKinds() {\n  let selectedKinds = [];\n  for (let item in window.dataStore.availableKinds) {\n    if (window.dataStore.availableKinds[item] == true) selectedKinds.push(item);\n  }\n  window.dataStore.selectedPlaces = window.dataStore.regionPlaces.filter(item =>\n    item.kinds.some(value => selectedKinds.some(kind => value === kind)),\n  );\n}\nfunction changeStatus(value) {\n  window.dataStore.availableKinds[value] = !window.dataStore.availableKinds[value];\n  selectPlaces();\n}\n"]}