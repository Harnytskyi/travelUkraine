{"version":3,"sources":["utils.js","index.js"],"names":["regionsCoordinates","Krym","lon_min","lon_max","lat_min","lat_max","Volyn","Kyiv","Khmelnytskyi","Zhytomyr","Ternopil","Rivne","Lviv","Kirovograd","Dnipropetrovsk","Kharkiv","Poltava","Cherkasy","Sumy","Chernihiv","Zaporizhzhia","Kherson","Donetsk","Luhansk","Zakarpattia","Chernivtsi","Mykolaiv","Odesa","Vinnytsia","regions","Object","keys","getOpenTripMapUrl","regionName","getOpenTripMarPlaceUrl","placexid","kinds","renderApp","appRoot","document","getElementById","innerHTML","App","classList","add","styles","app_root","searchInput","focus","selectionStart","value","length","window","addEventListener","findSVGElements","svg","contentDocument","svgPolyline","querySelectorAll","svgPath","querySelector","i","region","id","setAttribute","e","selectRegion","kyiv","content","dataStore","error","regionPlaces","map_of_ukraine","ShowRegions","container","list_block","showSearchInput","showAvailableKinds","showPlaces","place_info","showPlaceInfo","title_start","obj_map_of_ukraine","mapOfUkraine","isDataLoading","loadRegionPlaces","then","data","place","charCode","name","charCodeAt","push","xid","rate","split","selectAvailableKinds","selectedPlaces","catch","finally","url","fetch","response","json","search_input","searchRequest","listOfPlace","ul_list","item","button_place","link","join","placeToShow","info_message","getPlaceInfo","title_place_info","meta_place_info","point","lat","lon","url_place_info","wikipedia","image_block_place_info","preview","source","text_place_info","wikipedia_extracts","text","loadPlaceInfo","Boolean","Promise","resolve","availableKinds","kindsOfObject","concat","filter","some","kind","every","selectPlaces","filterByKinds","findPlaces","toUpperCase","searchedPlaces","includes","selectPlaceToShow","placesInfo","error_message","kindsCheckboxes","map","checkstatus","selectedKinds","changeStatus"],"mappings":"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","file":"travelUkraine.885805b2.js","sourceRoot":"..","sourcesContent":["export const regionsCoordinates = {\n  Krym: {\n    lon_min: 32.4642563,\n    lon_max: 36.5732288,\n    lat_min: 44.3907396,\n    lat_max: 45.9511497,\n  },\n  Volyn: {\n    lon_min: 24.1287231,\n    lon_max: 25.5373764,\n    lat_min: 50.6911293,\n    lat_max: 51.6681902,\n  },\n  Kyiv: {\n    lon_min: 29.7125244,\n    lon_max: 30.3724766,\n    lat_min: 49.3283665,\n    lat_max: 51.4423992,\n  },\n  Khmelnytskyi: {\n    lon_min: 26.3889885,\n    lon_max: 27.3504639,\n    lat_min: 48.6145267,\n    lat_max: 50.2584005,\n  },\n  Zhytomyr: {\n    lon_min: 27.6812553,\n    lon_max: 29.2579651,\n    lat_min: 49.8918697,\n    lat_max: 51.4189074,\n  },\n  Ternopil: {\n    lon_min: 25.2999687,\n    lon_max: 26.1488342,\n    lat_min: 48.8745383,\n    lat_max: 49.8451229,\n  },\n  Rivne: {\n    lon_min: 26.0971642,\n    lon_max: 26.8395996,\n    lat_min: 50.5224859,\n    lat_max: 51.7598717,\n  },\n  Lviv: {\n    lon_min: 23.47229,\n    lon_max: 24.7221565,\n    lat_min: 49.5465978,\n    lat_max: 50.242704,\n  },\n  Kirovograd: {\n    lon_min: 30.591259,\n    lon_max: 33.4671021,\n    lat_min: 48.224787,\n    lat_max: 48.7110135,\n  },\n  Dnipropetrovsk: {\n    lon_min: 33.8109398,\n    lon_max: 36.0679436,\n    lat_min: 48.1351628,\n    lat_max: 48.7620733,\n  },\n  Kharkiv: {\n    lon_min: 35.4703903,\n    lon_max: 37.6388168,\n    lat_min: 49.2184941,\n    lat_max: 50.219094,\n  },\n  Poltava: {\n    lon_min: 32.8285217,\n    lon_max: 34.8431396,\n    lat_min: 49.2067196,\n    lat_max: 50.0993309,\n  },\n  Cherkasy: {\n    lon_min: 31.2179947,\n    lon_max: 32.4386787,\n    lat_min: 49.0775767,\n    lat_max: 49.8202651,\n  },\n  Sumy: {\n    lon_min: 33.2145882,\n    lon_max: 35.1259518,\n    lat_min: 50.5399447,\n    lat_max: 51.1806343,\n  },\n  Chernihiv: {\n    lon_min: 30.9596443,\n    lon_max: 32.9368401,\n    lat_min: 50.7713164,\n    lat_max: 52.0050683,\n  },\n  Zaporizhzhia: {\n    lon_min: 34.9693108,\n    lon_max: 36.032238,\n    lat_min: 46.4869288,\n    lat_max: 48.0394139,\n  },\n  Kherson: {\n    lon_min: 32.409668,\n    lon_max: 34.6206665,\n    lat_min: 46.2367932,\n    lat_max: 46.813219,\n  },\n  Donetsk: {\n    lon_min: 37.1887207,\n    lon_max: 38.2104492,\n    lat_min: 46.9108747,\n    lat_max: 48.8710382,\n  },\n  Luhansk: {\n    lon_min: 38.4847641,\n    lon_max: 39.6823597,\n    lat_min: 48.3014667,\n    lat_max: 49.6119335,\n  },\n  Zakarpattia: {\n    lon_min: 22.2761536,\n    lon_max: 23.6830902,\n    lat_min: 48.359671,\n    lat_max: 48.6519642,\n  },\n  Chernivtsi: {\n    lon_min: 25.6214476,\n    lon_max: 26.1721802,\n    lat_min: 47.9899504,\n    lat_max: 48.5238812,\n  },\n  'Ivano-Frankivsk': {\n    lon_min: 24.1834831,\n    lon_max: 25.1164627,\n    lat_min: 48.40197,\n    lat_max: 48.9546355,\n  },\n  Mykolaiv: {\n    lon_min: 31.3247681,\n    lon_max: 32.9201889,\n    lat_min: 46.863947,\n    lat_max: 47.7465958,\n  },\n  Odesa: {\n    lon_min: 30.1241684,\n    lon_max: 30.7727051,\n    lat_min: 45.8364541,\n    lat_max: 47.5973662,\n  },\n  Vinnytsia: {\n    lon_min: 27.9656982,\n    lon_max: 29.4986343,\n    lat_min: 48.3264685,\n    lat_max: 49.5904614,\n  },\n  'Kyiv city': {\n    lon_min: 30.4126453,\n    lon_max: 30.6572628,\n    lat_min: 50.3429955,\n    lat_max: 50.5214763,\n  },\n};\nexport const regions = Object.keys(regionsCoordinates);\n\nexport function getOpenTripMapUrl(regionName) {\n  const { lon_min, lon_max, lat_min, lat_max } = regionsCoordinates[regionName];\n  return `https://api.opentripmap.com/0.1/en/places/bbox?lon_min=${lon_min}&lon_max=${lon_max}&lat_min=${lat_min}&lat_max=${lat_max}&src_attr=wikidata&format=json&limit=100&apikey=${process.env.OPEN_TRIP_MAP_API_KEY}`;\n}\nexport function getOpenTripMarPlaceUrl(placexid) {\n  return `https://api.opentripmap.com/0.1/en/places/xid/${placexid}?apikey=${process.env.OPEN_TRIP_MAP_API_KEY}`;\n}\n","// Start from here\n\nimport { regions, getOpenTripMapUrl, getOpenTripMarPlaceUrl } from './utils';\nimport mapOfUkraine from './src/map-ukraine.svg';\nimport styles from './src/style.css';\n\nconst kinds = [\n  'architecture',\n  'cultural',\n  'historic',\n  'industrial_facilities',\n  'natural',\n  'other',\n  'religion',\n];\n\nwindow.dataStore = {\n  regionPlaces: [],\n  selectedPlaces: [],\n  placeToShow: '',\n  searchRequest: '',\n  availableKinds: [],\n  isDataLoading: false,\n  error: null,\n  placesInfo: {},\n};\n\nwindow.regions = regions;\nwindow.selectRegion = selectRegion;\nwindow.selectPlaceToShow = selectPlaceToShow;\nwindow.selectPlaces = selectPlaces;\nwindow.renderApp = renderApp;\nwindow.changeStatus = changeStatus;\nwindow.loadRegionPlaces = loadRegionPlaces;\n\nrenderApp();\n\nfunction renderApp() {\n  const appRoot = document.getElementById('app-root');\n  appRoot.innerHTML = `\n    ${App()}\n    `;\n  appRoot.classList.add(`${styles.app_root}`);\n  const searchInput = document.getElementById('search');\n  if (searchInput) {\n    searchInput.focus();\n    searchInput.selectionStart = searchInput.value.length;\n  } else window.addEventListener('load', findSVGElements, false);\n}\n\nfunction findSVGElements() {\n  var svg = document.getElementById('mapOfUkraine').contentDocument;\n  var svgPolyline = svg.querySelectorAll('polyline');\n  var svgPath = svg.querySelector('path');\n  for (let i = 0; i < svgPolyline.length; i++) {\n    const region = svg.getElementById(svgPolyline[i].id);\n    region.setAttribute('value', `${regions[i]}`);\n    region.addEventListener('click', e => {\n      window.selectRegion(`${regions[i]}`);\n    });\n  }\n  const kyiv = svg.getElementById(svgPath.id);\n  kyiv.setAttribute('value', `${regions[25]}`);\n  kyiv.addEventListener('click', e => {\n    window.selectRegion(regions[25]);\n  });\n}\nfunction App() {\n  let content;\n  if (window.dataStore.error !== null) content = `${window.dataStore.error}`;\n  else if (window.dataStore.regionPlaces.length == 0)\n    content = `<div class=\"${styles.map_of_ukraine}\">${ShowRegions()}</div>`;\n  else {\n    content = `\n    <div class=\"${styles.container}\">\n      <div class=\"${styles.list_block}\">\n        <div>${showSearchInput()}</div> \n        <div>${showAvailableKinds()}</div>\n        <div>${showPlaces()}</div>\n      </div>\n      <div class=\"${styles.place_info}\" >${showPlaceInfo()}</div>\n    </div>`;\n  }\n  return content;\n}\n\nfunction ShowRegions() {\n  // let listOfRegion = [];\n  // for (let item in regions) {\n  //   listOfRegion.push(`<li><button value=\"${regions[item]}\" onclick=\"selectRegion(value)\" >\n  //           ${regions[item]}\n  //       </button></li>`);\n  // }\n  return `<h1 class=\"${styles.title_start}\">Подорожуй<span>Україною</span></h1><object id=\"mapOfUkraine\" class=\"${styles.obj_map_of_ukraine}\" type=\"image/svg+xml\" data=\"${mapOfUkraine}\" src=\"${mapOfUkraine}\"></object>`;\n}\n\nfunction selectRegion(region) {\n  window.dataStore.error = null;\n  window.dataStore.isDataLoading = true;\n  window\n    .loadRegionPlaces(region)\n    .then(data => {\n      window.dataStore.isDataLoading = false;\n      // if (error) {\n      //   window.dataStore.error = error;\n      //} else if (data) {\n      //data = data.data;\n      for (let place in data) {\n        const charCode = data[place].name.charCodeAt(0);\n        if (charCode > 1030 && charCode < 1112) {\n          window.dataStore.regionPlaces.push({\n            xid: data[place].xid,\n            name: data[place].name,\n            rate: data[place].rate,\n            kinds: data[place].kinds.split(','),\n          });\n        }\n      }\n      selectAvailableKinds();\n      window.dataStore.selectedPlaces = [...window.dataStore.regionPlaces];\n      //}\n    })\n    .catch(error => {\n      window.dataStore.error = 'some error occurred ' + error;\n    })\n    .finally(window.renderApp);\n}\nfunction loadRegionPlaces(region) {\n  const url = getOpenTripMapUrl(region);\n  return fetch(url)\n    .then(response => response.json())\n    .then(data => data);\n}\nfunction showSearchInput() {\n  return `<input id=\"search\" class=\"${styles.search_input}\" value=\"${window.dataStore.searchRequest}\" onsearch=\"window.dataStore.searchRequest = value; selectPlaces()\" onkeyup=\"window.dataStore.searchRequest = value; selectPlaces()\" type=\"search\">`;\n}\nfunction showPlaces() {\n  let listOfPlace = [];\n  listOfPlace.push(`<ul class=\"${styles.ul_list}\">`);\n  for (let item in window.dataStore.selectedPlaces) {\n    listOfPlace.push(`<li><button class=\"${styles.button_place} ${styles.link}\" value=\"${window.dataStore.selectedPlaces[item].xid}\" onclick=\"selectPlaceToShow(value)\" >\n           ${window.dataStore.selectedPlaces[item].name}\n        </button></li>`);\n  }\n  listOfPlace.push(`</ul>`);\n  return listOfPlace.join('');\n}\n\nfunction showPlaceInfo() {\n  if (window.dataStore.placeToShow == '')\n    return `<h2 class=\"${styles.info_message}\">Обирай що цікавить</h2>`;\n  else {\n    const place = getPlaceInfo();\n    return `<div class=\"${styles.title_place_info}\"><strong>${place.name}</strong></div>\n            <div class=\"${styles.meta_place_info}\">GPS: ${place.point.lat}, ${place.point.lon} | <a class=\"${styles.url_place_info} ${styles.link}\" href=\"${place.wikipedia}\">Wikipedia</a></div>\n            <div class=\"${styles.image_block_place_info}\"><img src=\"${place.preview.source}\" alt=\"\"></div>\n            <p class=\"${styles.text_place_info}\">${place.wikipedia_extracts.text}</p>`;\n  }\n}\nfunction loadPlaceInfo() {\n  const { placeToShow } = window.dataStore;\n  const url = getOpenTripMarPlaceUrl(placeToShow);\n  if (!Boolean(getPlaceInfo())) {\n    return fetch(url)\n      .then(response => response.json())\n      .then(data => data);\n  }\n  return Promise.resolve({});\n}\n\nfunction selectAvailableKinds() {\n  let availableKinds = [];\n  for (let item in window.dataStore.regionPlaces) {\n    let kindsOfObject = window.dataStore.regionPlaces[item].kinds;\n    availableKinds = availableKinds.concat(\n      kindsOfObject.filter(\n        item => kinds.some(kind => kind === item) && availableKinds.every(kind => kind != item),\n      ),\n    );\n  }\n  for (let kind in availableKinds) {\n    window.dataStore.availableKinds[availableKinds[kind]] = true;\n  }\n}\n\nfunction selectPlaces() {\n  filterByKinds();\n  findPlaces();\n  renderApp();\n}\nfunction findPlaces() {\n  let searchRequest = window.dataStore.searchRequest.toUpperCase();\n  let searchedPlaces = window.dataStore.selectedPlaces.filter(item =>\n    item.name.toUpperCase().includes(searchRequest),\n  );\n  window.dataStore.selectedPlaces = searchedPlaces;\n}\nfunction selectPlaceToShow(place) {\n  window.dataStore.placeToShow = place;\n  window.dataStore.error = null;\n  window.dataStore.isDataLoading = true;\n  loadPlaceInfo()\n    .then(data => {\n      //window.dataStore.isDataLoading = false;\n      //if (error) window.dataStore.error = error;\n      //else if (data) {\n      if (Object.keys(data).length !== 0) window.dataStore.placesInfo[place] = data;\n      //}\n    })\n    .catch(() => {\n      window.dataStore.error = `<h2 class=${styles.error_message}>Cталася якась помилка</h2>`;\n    })\n    .finally(window.renderApp);\n}\nfunction showAvailableKinds() {\n  let kindsCheckboxes = Object.keys(window.dataStore.availableKinds).map(\n    item =>\n      `<label><input type=\"checkbox\" value=\"${item}\" onchange=\"changeStatus(value)\" ${checkstatus(\n        item,\n      )}>${item}</label>`,\n  );\n  return kindsCheckboxes.join('');\n}\nfunction checkstatus(value) {\n  if (window.dataStore.availableKinds[value] == true) return `checked`;\n}\nfunction filterByKinds() {\n  let selectedKinds = [];\n  for (let item in window.dataStore.availableKinds) {\n    if (window.dataStore.availableKinds[item] == true) selectedKinds.push(item);\n  }\n  window.dataStore.selectedPlaces = window.dataStore.regionPlaces.filter(item =>\n    item.kinds.some(value => selectedKinds.some(kind => value === kind)),\n  );\n}\nfunction changeStatus(value) {\n  window.dataStore.availableKinds[value] = !window.dataStore.availableKinds[value];\n  selectPlaces();\n}\nfunction getPlaceInfo() {\n  const { placeToShow, placesInfo } = window.dataStore;\n  return placesInfo[placeToShow];\n}\n"]}